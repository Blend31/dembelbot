# -*- coding: utf-8 -*-
import logging
import os
from datetime import datetime, timedelta
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters
from datetime import datetime, time, timedelta # datetime —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
from zoneinfo import ZoneInfo
from telegram.ext import PicklePersistence

# --- –ù–û–í–´–ô –ö–û–î –î–õ–Ø HEALTH CHECK ---
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ù–û–í–´–ô –ö–û–î: HTTP Handler –∏ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
RENDER_PORT = int(os.environ.get('PORT', 10000)) # Render –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç PORT

class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b"Bot is alive!")
        # logger.info("Health check request received and responded.") # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     def do_HEAD(self): # <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–û
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
         
def run_health_check_server():
    server_address = ('', RENDER_PORT) # –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö –Ω–∞ –ø–æ—Ä—Ç—É –æ—Ç Render
    try:
        httpd = HTTPServer(server_address, HealthCheckHandler)
        logger.info(f"Health check HTTP server_legacy_subtitles_settings_dialog_ok_button running on port {RENDER_PORT}")
        httpd.serve_forever()
    except Exception as e:
        logger.error(f"Could not start or run health check server_legacy_subtitles_settings_dialog_ok_button: {e}", exc_info=True)
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –≤–∞—à –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: DATE_INPUT, MOTIVATION_PHRASES, –∏ —Ç.–¥.)
# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
DATE_INPUT, MAIN_MENU = range(2)

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
MOTIVATION_PHRASES = {
    "long": [
        "–í–ü–ï–†–ï–î–ò –ï–©–ï –ú–ù–û–ì–û –£–ß–ï–ë–ù–´–• –ß–ê–°–û–í, –ö–£–†–°–ê–ù–¢! –ö–†–ï–ü–ò–¢–ï–°–¨!",
        "–ü–£–¢–¨ –ö –û–§–ò–¶–ï–†–°–ö–ò–ú –ü–û–ì–û–ù–ê–ú –î–û–õ–û–ì, –ù–û –ü–û–ß–ï–¢–ï–ù!",
        "–£–ß–ï–ë–ê –ü–†–û–î–û–õ–ñ–ê–ï–¢–°–Ø! –ù–ï –°–ë–ê–í–õ–Ø–ô–¢–ï –¢–ï–ú–ü, –ë–£–î–£–©–ò–ô –û–§–ò–¶–ï–†!",
        "–ö–ê–ñ–î–´–ô –î–ï–ù–¨ –ü–†–ò–ë–õ–ò–ñ–ê–ï–¢ –í–ê–° –ö –û–§–ò–¶–ï–†–°–ö–û–ú–£ –ó–í–ê–ù–ò–Æ!",
        "–£–°–ï–†–î–ò–ï –í –£–ß–ï–ë–ï –°–ï–ì–û–î–ù–Ø ‚Äî –£–°–ü–ï–• –í –°–õ–£–ñ–ë–ï –ó–ê–í–¢–†–ê!"
    ],
    "medium": [
        "–≠–ö–í–ê–¢–û–† –ü–û–ó–ê–î–ò! –°–¢–ê–ù–û–í–ò–¢–ï–°–¨ –ë–õ–ò–ñ–ï –ö –û–§–ò–¶–ï–†–°–ö–û–ú–£ –ó–í–ê–ù–ò–Æ!",
        "–£–ñ–ï –ë–û–õ–¨–®–ï –ü–û–õ–û–í–ò–ù–´ –£–ß–ï–ë–´ –ó–ê–í–ï–†–®–ï–ù–û! –¢–ê–ö –î–ï–†–ñ–ê–¢–¨!",
        "–í–ò–î–ù–ê –§–ò–ù–ò–®–ù–ê–Ø –ü–†–Ø–ú–ê–Ø, –ö–£–†–°–ê–ù–¢! –í–ü–ï–†–ï–î–ò –û–§–ò–¶–ï–†–°–ö–ò–ï –ü–û–ì–û–ù–´!",
        "–ü–†–û–î–û–õ–ñ–ê–ô–¢–ï –í –¢–û–ú –ñ–ï –î–£–•–ï! –†–û–î–ò–ù–ê –ñ–î–ï–¢ –í–ê–®–ò–• –ó–ù–ê–ù–ò–ô!",
        "–ù–ê–°–¢–û–ô–ß–ò–í–û–°–¢–¨ –ò –¢–†–£–î –í–ê–° –ö –í–´–ü–£–°–ö–£ –ü–†–ò–í–ï–î–£–¢!"
    ],
    "short": [
        "–ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–´–ï –≠–ö–ó–ê–ú–ï–ù–´ –ù–ê –ì–û–†–ò–ó–û–ù–¢–ï! –î–ï–†–ñ–ò–¢–ï–°–¨, –ö–£–†–°–ê–ù–¢!",
        "–°–ö–û–†–û –ü–û–õ–£–ß–ò–¢–ï –ü–ï–†–í–û–ï –û–§–ò–¶–ï–†–°–ö–û–ï –ó–í–ê–ù–ò–ï! –í–´–î–ï–†–ñ–ò–¢–ï –§–ò–ù–ê–õ–¨–ù–´–ô –†–´–í–û–ö!",
        "–°–û–í–°–ï–ú –ù–ï–ú–ù–û–ì–û –û–°–¢–ê–õ–û–°–¨ –î–û –í–´–ü–£–°–ö–ê! –ß–ï–°–¢–¨ –ò–ú–ï–Æ!",
        "–í–ü–ï–†–ï–î–ò –í–†–£–ß–ï–ù–ò–ï –ü–û–ì–û–ù! –ë–£–î–¨–¢–ï –î–û–°–¢–û–ô–ù–´ –í–´–°–û–ö–û–ì–û –ó–í–ê–ù–ò–Ø!",
        "–ü–û–°–õ–ï–î–ù–ò–ï –†–£–ë–ï–ñ–ò –ü–ï–†–ï–î –û–§–ò–¶–ï–†–°–ö–ò–ú –ó–í–ê–ù–ò–ï–ú! –ù–ï –°–î–ê–í–ê–ô–¢–ï–°–¨!"
    ],
    "almost": [
        "–ì–û–¢–û–í–¨–¢–ï –ü–ê–†–ê–î–ù–£–Æ –§–û–†–ú–£! –í–´–ü–£–°–ö –°–û–í–°–ï–ú –°–ö–û–†–û!",
        "–°–ß–ò–¢–ê–ù–ù–´–ï –î–ù–ò –î–û –ü–†–ò–°–í–û–ï–ù–ò–Ø –ó–í–ê–ù–ò–Ø! –î–ï–†–ñ–ò–¢–ï–°–¨, –ö–£–†–°–ê–ù–¢!",
        "–°–û–í–°–ï–ú –°–ö–û–†–û –í–´ –°–¢–ê–ù–ï–¢–ï –û–§–ò–¶–ï–†–û–ú! –†–û–î–ò–ù–ê –ì–û–†–î–ò–¢–°–Ø –¢–û–ë–û–ô!",
        "–û–§–ò–¶–ï–†–°–ö–ò–ï –ü–û–ì–û–ù–´ –£–ñ–ï –ñ–î–£–¢ –í–ê–°! –§–ò–ù–ê–õ–¨–ù–´–ô –†–´–í–û–ö!",
        "–í–´ –ù–ê –ü–û–†–û–ì–ï –ù–û–í–û–ô –ñ–ò–ó–ù–ò! –ß–ï–°–¢–¨ –ò –°–õ–ê–í–ê –í–´–ü–£–°–ö–ù–ò–ö–ê–ú!"
    ]
}

# –¶–∏—Ç–∞—Ç—ã –≤–µ–ª–∏–∫–∏—Ö –≤–æ–µ–Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤
MILITARY_QUOTES = [
    "¬´–ü–ª–æ—Ö —Ç–æ—Ç —Å–æ–ª–¥–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –º–µ—á—Ç–∞–µ—Ç —Å—Ç–∞—Ç—å –≥–µ–Ω–µ—Ä–∞–ª–æ–º¬ª ‚Äî –ê.–í. –°—É–≤–æ—Ä–æ–≤",
    "¬´–¢—è–∂–µ–ª–æ –≤ —É—á–µ–Ω–∏–∏, –ª–µ–≥–∫–æ –≤ –±–æ—é¬ª ‚Äî –ê.–í. –°—É–≤–æ—Ä–æ–≤",
    "¬´–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî –º–∞—Ç—å –ø–æ–±–µ–¥—ã¬ª ‚Äî –ê.–í. –°—É–≤–æ—Ä–æ–≤",
    "¬´–ö—Ç–æ –Ω–∞–ø—É–≥–∞–Ω ‚Äî –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É –ø–æ–±–∏—Ç¬ª ‚Äî –ê.–í. –°—É–≤–æ—Ä–æ–≤",
    "¬´–í–æ–π—Å–∫–æ –Ω–µ–æ–±—É—á–µ–Ω–Ω–æ–µ ‚Äî —á—Ç–æ —Å–∞–±–ª—è –Ω–µ–æ—Ç—Ç–æ—á–µ–Ω–Ω–∞—è¬ª ‚Äî –ú.–ò. –ö—É—Ç—É–∑–æ–≤",
    "¬´–ì–¥–µ –º—É–∂–µ—Å—Ç–≤–æ, —Ç–∞–º –ø–æ–±–µ–¥–∞¬ª ‚Äî –ì.–ö. –ñ—É–∫–æ–≤",
    "¬´–ö—Ç–æ —Ö–æ—á–µ—Ç –º–Ω–æ–≥–æ –∑–Ω–∞—Ç—å, —Ç–æ–º—É –Ω–∞–¥–æ –º–∞–ª–æ —Å–ø–∞—Ç—å¬ª ‚Äî –ê.–í. –°—É–≤–æ—Ä–æ–≤",
    "¬´–ù–∞—É–∫–∞ –ø–æ–±–µ–∂–¥–∞—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π¬ª ‚Äî –ú.–í. –§—Ä—É–Ω–∑–µ",
    "¬´–ü–æ–ª–∫–æ–≤–æ–¥–µ—Ü –∏—Å—Ç–∏–Ω–Ω—ã–π –≤–µ–¥–µ—Ç –≤–æ–π—Å–∫–æ, –∞ –Ω–µ –≤–æ–π—Å–∫–æ –µ–≥–æ¬ª ‚Äî –ú.–ò. –î—Ä–∞–≥–æ–º–∏—Ä–æ–≤",
    "¬´–û—Ñ–∏—Ü–µ—Ä ‚Äî —ç—Ç–æ –Ω–µ –∑–≤–∞–Ω–∏–µ, –∞ –ø—Ä–∏–∑–≤–∞–Ω–∏–µ¬ª ‚Äî –Ω–∞—Ä–æ–¥–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å"
]

# ASCII –∞—Ä—Ç –¥–ª—è –±–æ—Ç–∞
ACADEMY_ASCII = """
‚òÖ ‚òÖ ‚òÖ ‚òÖ ‚òÖ ‚òÖ ‚òÖ ‚òÖ ‚òÖ ‚òÖ ‚òÖ ‚òÖ
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   –°–ß–ï–¢–ß–ò–ö –î–û –í–´–ü–£–°–ö–ê    
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
   üéñÔ∏è  ü™ñ  üéñÔ∏è  ü™ñ  üéñÔ∏è  ü™ñ
"""

# –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
DIVIDER = "‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ"


def create_progress_bar(days_left, total_days=1825):  # –ü—Ä–∏–º–µ—Ä–Ω–æ 5 –ª–µ—Ç –æ–±—É—á–µ–Ω–∏—è (1825 –¥–Ω–µ–π)
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –æ–±—É—á–µ–Ω–∏—è"""
    if days_left < 0:
        return "[–í–´–ü–£–°–ö!]"

    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    days_passed = total_days - days_left
    if days_passed > total_days:  # –î–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 0 –¥–Ω–µ–π
        days_passed = total_days
    if days_passed < 0: # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞ –≤ –¥–∞–ª–µ–∫–æ–º –±—É–¥—É—â–µ–º, days_passed –º–æ–∂–µ—Ç –±—ã—Ç—å < 0
        days_passed = 0


    percentage = int((days_passed / total_days) * 10) if total_days > 0 else 0


    progress = "‚ñì" * percentage + "‚ñë" * (10 - percentage)
    percent_num = int((days_passed / total_days) * 100) if total_days > 0 else 0


    return f"[{progress}] {percent_num}%"


def get_motivation(days_left, total_days=1825):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏"""
    if days_left <= 0:
        return "–ü–û–ó–î–†–ê–í–õ–Ø–Æ, –õ–ï–ô–¢–ï–ù–ê–ù–¢! –ß–ï–°–¢–¨ –ò–ú–ï–Æ!"

    percent_left = (days_left / total_days) * 100 if total_days > 0 else 100


    if percent_left > 70:
        return random.choice(MOTIVATION_PHRASES["long"])
    elif percent_left > 30:
        return random.choice(MOTIVATION_PHRASES["medium"])
    elif percent_left > 10:
        return random.choice(MOTIVATION_PHRASES["short"])
    else:
        return random.choice(MOTIVATION_PHRASES["almost"])


def get_next_milestone(target_date, today):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–ª–∏–∂–∞–π—à—É—é –≤–∞–∂–Ω—É—é –≤–µ—Ö—É –ø–µ—Ä–µ–¥ –≤—ã–ø—É—Å–∫–æ–º"""
    days_left = (target_date - today).days

    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –≤–∞–∂–Ω—ã–µ –≤–µ—Ö–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø—É—Å–∫–æ–º
    milestones = []

    # –ï—Å–ª–∏ –¥–æ –≤—ã–ø—É—Å–∫–∞ –±–æ–ª—å—à–µ 100 –¥–Ω–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–¥–Ω–µ–≤–∫—É
    if days_left > 100:
        hundred_days = target_date - timedelta(days=100)
        milestones.append(("100 –î–ù–ï–ô –î–û –í–´–ü–£–°–ö–ê", (hundred_days - today).days, 2))

    # –ï—Å–ª–∏ –¥–æ –≤—ã–ø—É—Å–∫–∞ –±–æ–ª—å—à–µ 60 –¥–Ω–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ—Å—ç–∫–∑–∞–º–µ–Ω—ã
    if days_left > 60:
        state_exams = target_date - timedelta(days=60)
        milestones.append(("–ì–û–°–≠–ö–ó–ê–ú–ï–ù–´", (state_exams - today).days, 3))

    # –ï—Å–ª–∏ –¥–æ –≤—ã–ø—É—Å–∫–∞ –±–æ–ª—å—à–µ 30 –¥–Ω–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –¥–∏–ø–ª–æ–º–∞
    if days_left > 30:
        thesis_defense = target_date - timedelta(days=30)
        milestones.append(("–ó–ê–©–ò–¢–ê –î–ò–ü–õ–û–ú–ê", (thesis_defense - today).days, 3))

    # –ï—Å–ª–∏ –¥–æ –≤—ã–ø—É—Å–∫–∞ –±–æ–ª—å—à–µ 10 –¥–Ω–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    if days_left > 10:
        final_prep = target_date - timedelta(days=10)
        milestones.append(("–ü–û–°–õ–ï–î–ù–ò–ï –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–Ø", (final_prep - today).days, 2))

    # –ï—Å–ª–∏ –¥–æ –≤—ã–ø—É—Å–∫–∞ –±–æ–ª—å—à–µ 1 –¥–Ω—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ü–∏—é –≤—ã–ø—É—Å–∫–∞
    if days_left > 1:
        rehearsal = target_date - timedelta(days=1)
        milestones.append(("–†–ï–ü–ï–¢–ò–¶–ò–Ø –í–´–ü–£–°–ö–ê", (rehearsal - today).days, 2))

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Ö–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤ –±—É–¥—É—â–µ–º
    future_milestones = [(name, days, importance) for name, days, importance in milestones
                         if days > 0]
    future_milestones.sort(key=lambda x: x[1])  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–æ–±—ã—Ç–∏—è

    return future_milestones[0] if future_milestones else None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ASCII-–∞—Ä—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await update.message.reply_text(
        f"{ACADEMY_ASCII}\n"
        "–ü–†–ò–í–ï–¢–°–¢–í–£–Æ, –ö–£–†–°–ê–ù–¢! üéñÔ∏è\n\n"
        "–£–ß–ï–ë–ù–ê–Ø –ß–ê–°–¢–¨ –ó–ê–ü–†–ê–®–ò–í–ê–ï–¢ –î–ê–ù–ù–´–ï!\n\n"
        "–£–ö–ê–ñ–ò–¢–ï –î–ê–¢–£ –í–´–ü–£–°–ö–ê:\n\n"
        "–§–û–†–ú–ê–¢: –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–ê–ü–†–ò–ú–ï–†: 25.06.2026"
    )

    return DATE_INPUT


async def calculate_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ —Ä–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {update.message.text}")

    user_text = update.message.text

    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤—ã–ø—É—Å–∫–∞
        target_date_dt = datetime.strptime(user_text, "%d.%m.%Y") # –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
        # –î–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –≤–∞–∂–Ω–æ
        target_date = target_date_dt.date()
        today = datetime.now().date()


        # –†–∞—Å—á–µ—Ç—ã
        days_left = (target_date - today).days


        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        # context.user_data['target_date'] = target_date # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç date
        context.user_data['target_date_iso'] = target_date.isoformat() # –•—Ä–∞–Ω–∏–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É ISO –¥–ª—è PicklePersistence

        tz_str = context.user_data.get("tz", "Europe/Moscow") # –ü—Ä–∏–º–µ—Ä, –ª—É—á—à–µ –±—Ä–∞—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å


        # –°—Ç–∞–≤–∏–º/–ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π job
        reschedule_daily_job(context, update.effective_chat.id, target_date, tz_str)


        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (–æ—Ü–µ–Ω–æ—á–Ω—ã–π, –±–µ–∑ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞)
        progress_bar = create_progress_bar(days_left)

        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞
        motivation = get_motivation(days_left)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–µ–π –≤–∞–∂–Ω–æ–π –≤–µ—Ö–µ
        next_milestone = get_next_milestone(target_date, today)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
        quote = random.choice(MILITARY_QUOTES)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if days_left < 0:
            response = (
                f"‚≠êÔ∏è –î–û–ö–õ–ê–î–´–í–ê–Æ! ‚≠êÔ∏è\n\n"
                f"–í–´ –£–ñ–ï {abs(days_left)} –î–ù–ï–ô –ö–ê–ö –û–§–ò–¶–ï–†!\n"
                f"–ü–û–ó–î–†–ê–í–õ–Ø–Æ –° –£–°–ü–ï–®–ù–´–ú –û–ö–û–ù–ß–ê–ù–ò–ï–ú –í–û–ï–ù–ù–û–ì–û –£–ù–ò–í–ï–†–°–ò–¢–ï–¢–ê, –¢–û–í–ê–†–ò–© –õ–ï–ô–¢–ï–ù–ê–ù–¢!"
            )
        elif days_left == 0:
            response = (
                f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –í–ù–ò–ú–ê–ù–ò–ï! –°–ï–ì–û–î–ù–Ø –í–´–ü–£–°–ö! ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n\n"
                f"–ü–û–ó–î–†–ê–í–õ–Ø–Æ! –ü–†–ò–ö–ê–ó –û –ü–†–ò–°–í–û–ï–ù–ò–ò –ó–í–ê–ù–ò–Ø –ü–û–î–ü–ò–°–ê–ù!\n"
                f"–ß–ï–°–¢–¨ –ò–ú–ï–Æ, –¢–û–í–ê–†–ò–© –õ–ï–ô–¢–ï–ù–ê–ù–¢!"
            )
        else:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ö–µ
            if next_milestone:
                milestone_name, days_to_milestone, importance = next_milestone
                milestone_markers = "‚ÄºÔ∏è" if importance == 3 else "‚ùóÔ∏è"
                milestone_info = f"\n{milestone_markers} –ë–õ–ò–ñ–ê–ô–®–ï–ï –°–û–ë–´–¢–ò–ï: {milestone_name} –ß–ï–†–ï–ó {days_to_milestone} –î–ù–ï–ô"
            else:
                milestone_info = ""

            # –û—Ü–µ–Ω–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω–µ–π –¥–æ –≤—ã–ø—É—Å–∫–∞ (–¥–ª—è 5 –ª–µ—Ç –æ–±—É—á–µ–Ω–∏—è)
            estimated_course = 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Ä—Å
            if days_left > 365 * 4:  # –ë–æ–ª—å—à–µ 4 –ª–µ—Ç
                estimated_course = 1
            elif days_left > 365 * 3:  # –ë–æ–ª—å—à–µ 3 –ª–µ—Ç
                estimated_course = 2
            elif days_left > 365 * 2:  # –ë–æ–ª—å—à–µ 2 –ª–µ—Ç
                estimated_course = 3
            elif days_left > 365:  # –ë–æ–ª—å—à–µ 1 –≥–æ–¥–∞
                estimated_course = 4

            response = (
                f"‚≠êÔ∏è –°–í–û–î–ö–ê –ù–ê –°–ï–ì–û–î–ù–Ø, –ö–£–†–°–ê–ù–¢! ‚≠êÔ∏è\n\n"
                f"–î–û –í–´–ü–£–°–ö–ê: {days_left} –î–ù–ï–ô\n"
                f"{DIVIDER}\n"
                f"–ü–†–û–ì–†–ï–°–° –û–ë–£–ß–ï–ù–ò–Ø: {progress_bar}\n"
                f"–ü–†–ï–î–ü–û–õ–ê–ì–ê–ï–ú–´–ô –ö–£–†–°: {estimated_course}\n"
                f"{milestone_info}\n"
                f"{DIVIDER}\n"
                f"‚û§ {motivation}\n\n"
                f"üí≠ {quote}"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—ã –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤
            if days_left == 100:
                response += "\n\nüíØ –†–û–í–ù–û 100 –î–ù–ï–ô –î–û –í–´–ü–£–°–ö–ê! –î–ï–†–ñ–ò–¢–ï–°–¨!"
            elif days_left <= 30 and days_left > 0 : # –î–æ–±–∞–≤–∏–ª >0, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤
                response += f"\n\nüéñÔ∏è –ú–ï–ù–¨–®–ï –ú–ï–°–Ø–¶–ê –î–û –ü–†–ò–°–í–û–ï–ù–ò–Ø –ó–í–ê–ù–ò–Ø!"
            elif 60 <= days_left <= 70:
                response += f"\n\nüìö –ì–û–°–≠–ö–ó–ê–ú–ï–ù–´ –ü–†–ò–ë–õ–ò–ñ–ê–Æ–¢–°–Ø! –ë–£–î–¨–¢–ï –ì–û–¢–û–í–´!"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–π)
        keyboard = [
            ['üìä –û–ë–ù–û–í–ò–¢–¨ –î–ê–ù–ù–´–ï'],
            ['üîÑ –ò–ó–ú–ï–ù–ò–¢–¨ –î–ê–¢–£']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(response, reply_markup=reply_markup)

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
        return MAIN_MENU

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ö†Ô∏è –û–®–ò–ë–ö–ê –í –§–û–†–ú–ê–¢–ï –î–ê–¢–´! ‚ö†Ô∏è\n\n"
            "–£–ö–ê–ñ–ò–¢–ï –î–ê–¢–£ –í–´–ü–£–°–ö–ê –í –§–û–†–ú–ê–¢–ï –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–ê–ü–†–ò–ú–ï–†: 25.06.2026"
        )
        return DATE_INPUT


async def check_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω—è—Ö –¥–æ –≤—ã–ø—É—Å–∫–∞."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

    # if 'target_date' not in context.user_data: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ISO —Å—Ç—Ä–æ–∫–µ
    if 'target_date_iso' not in context.user_data:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–ï–¢ –î–ê–ù–ù–´–• –û –í–´–ü–£–°–ö–ï! ‚ö†Ô∏è\n"
            "–ò–°–ü–û–õ–¨–ó–£–ô–¢–ï /start –î–õ–Ø –í–í–û–î–ê –î–ê–¢–´."
        )
        # –ï—Å–ª–∏ ConversationHandler –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ª—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ –∏–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ,
        # –∞ –Ω–µ ConversationHandler.END, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ.
        # –ù–æ –µ—Å–ª–∏ –º—ã –≤ MAIN_MENU –∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Ç–æ –º–æ–∂–Ω–æ –∏ END.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ –≤—ã–∑–≤–∞–ª–∏ check_days, –∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —ç—Ç–æ –æ—à–∏–±–∫–∞, –º–æ–∂–Ω–æ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å.
        return ConversationHandler.END # –ò–ª–∏ DATE_INPUT, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞—Ç—É

    # target_date = context.user_data['target_date'] # –ë–µ—Ä–µ–º ISO —Å—Ç—Ä–æ–∫—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    target_date = datetime.fromisoformat(context.user_data['target_date_iso']).date()
    today = datetime.now().date()


    # –†–∞—Å—á–µ—Ç—ã
    days_left = (target_date - today).days

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar = create_progress_bar(days_left)

    # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞
    motivation = get_motivation(days_left)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–µ–π –≤–∞–∂–Ω–æ–π –≤–µ—Ö–µ
    next_milestone = get_next_milestone(target_date, today)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
    quote = random.choice(MILITARY_QUOTES)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ calculate_days)
    if days_left < 0:
        response = (
            f"‚≠êÔ∏è –î–û–ö–õ–ê–î–´–í–ê–Æ! ‚≠êÔ∏è\n\n"
            f"–í–´ –£–ñ–ï {abs(days_left)} –î–ù–ï–ô –ö–ê–ö –û–§–ò–¶–ï–†!\n"
            f"–ü–û–ó–î–†–ê–í–õ–Ø–Æ –° –£–°–ü–ï–®–ù–´–ú –û–ö–û–ù–ß–ê–ù–ò–ï–ú –í–û–ï–ù–ù–û–ì–û –£–ù–ò–í–ï–†–°–ò–¢–ï–¢–ê, –¢–û–í–ê–†–ò–© –õ–ï–ô–¢–ï–ù–ê–ù–¢!"
        )
    elif days_left == 0:
        response = (
            f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –í–ù–ò–ú–ê–ù–ò–ï! –°–ï–ì–û–î–ù–Ø –í–´–ü–£–°–ö! ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n\n"
            f"–ü–û–ó–î–†–ê–í–õ–Ø–Æ! –ü–†–ò–ö–ê–ó –û –ü–†–ò–°–í–û–ï–ù–ò–ò –ó–í–ê–ù–ò–Ø –ü–û–î–ü–ò–°–ê–ù!\n"
            f"–ß–ï–°–¢–¨ –ò–ú–ï–Æ, –¢–û–í–ê–†–ò–© –õ–ï–ô–¢–ï–ù–ê–ù–¢!"
        )
    else:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ö–µ
        if next_milestone:
            milestone_name, days_to_milestone, importance = next_milestone
            milestone_markers = "‚ÄºÔ∏è" if importance == 3 else "‚ùóÔ∏è"
            milestone_info = f"\n{milestone_markers} –ë–õ–ò–ñ–ê–ô–®–ï–ï –°–û–ë–´–¢–ò–ï: {milestone_name} –ß–ï–†–ï–ó {days_to_milestone} –î–ù–ï–ô"
        else:
            milestone_info = ""

        # –û—Ü–µ–Ω–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω–µ–π –¥–æ –≤—ã–ø—É—Å–∫–∞ (–¥–ª—è 5 –ª–µ—Ç –æ–±—É—á–µ–Ω–∏—è)
        estimated_course = 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Ä—Å
        if days_left > 365 * 4:  # –ë–æ–ª—å—à–µ 4 –ª–µ—Ç
            estimated_course = 1
        elif days_left > 365 * 3:  # –ë–æ–ª—å—à–µ 3 –ª–µ—Ç
            estimated_course = 2
        elif days_left > 365 * 2:  # –ë–æ–ª—å—à–µ 2 –ª–µ—Ç
            estimated_course = 3
        elif days_left > 365:  # –ë–æ–ª—å—à–µ 1 –≥–æ–¥–∞
            estimated_course = 4

        response = (
            f"‚≠êÔ∏è –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï, –ö–£–†–°–ê–ù–¢! ‚≠êÔ∏è\n\n"
            f"–î–û –í–´–ü–£–°–ö–ê: {days_left} –î–ù–ï–ô\n"
            f"{DIVIDER}\n"
            f"–ü–†–û–ì–†–ï–°–° –û–ë–£–ß–ï–ù–ò–Ø: {progress_bar}\n"
            f"–ü–†–ï–î–ü–û–õ–ê–ì–ê–ï–ú–´–ô –ö–£–†–°: {estimated_course}\n"
            f"{milestone_info}\n"
            f"{DIVIDER}\n"
            f"‚û§ {motivation}\n\n"
            f"üí≠ {quote}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—ã –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤
        if days_left == 100:
            response += "\n\nüíØ –†–û–í–ù–û 100 –î–ù–ï–ô –î–û –í–´–ü–£–°–ö–ê! –î–ï–†–ñ–ò–¢–ï–°–¨!"
        elif days_left <= 30 and days_left > 0:
            response += f"\n\nüéñÔ∏è –ú–ï–ù–¨–®–ï –ú–ï–°–Ø–¶–ê –î–û –ü–†–ò–°–í–û–ï–ù–ò–Ø –ó–í–ê–ù–ò–Ø!"
        elif 60 <= days_left <= 70:
            response += f"\n\nüìö –ì–û–°–≠–ö–ó–ê–ú–ï–ù–´ –ü–†–ò–ë–õ–ò–ñ–ê–Æ–¢–°–Ø! –ë–£–î–¨–¢–ï –ì–û–¢–û–í–´!"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–π)
    keyboard = [
        ['üìä –û–ë–ù–û–í–ò–¢–¨ –î–ê–ù–ù–´–ï'],
        ['üîÑ –ò–ó–ú–ï–ù–ò–¢–¨ –î–ê–¢–£']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(response, reply_markup=reply_markup)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
    return MAIN_MENU


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π job, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    for old_job in context.job_queue.get_jobs_by_name(str(update.effective_chat.id)):
        old_job.schedule_removal()
        logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π job –¥–ª—è —á–∞—Ç–∞ {update.effective_chat.id} –ø—Ä–∏ —Å–±—Ä–æ—Å–µ.")


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ –∏ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
    await update.message.reply_text(
        f"{ACADEMY_ASCII}\n"
        "–î–ê–ù–ù–´–ï –°–ë–†–û–®–ï–ù–´! –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ù–û–í–û!\n\n"
        "–ü–†–ò–í–ï–¢–°–¢–í–£–Æ, –ö–£–†–°–ê–ù–¢! üéñÔ∏è\n\n"
        "–£–ö–ê–ñ–ò–¢–ï –î–ê–¢–£ –í–´–ü–£–°–ö–ê:\n\n"
        "–§–û–†–ú–ê–¢: –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–ê–ü–†–ò–ú–ï–†: 25.06.2026"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    return DATE_INPUT


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    await update.message.reply_text("–û–ü–ï–†–ê–¶–ò–Ø –û–¢–ú–ï–ù–ï–ù–ê, –ö–£–†–°–ê–ù–¢!")
    return ConversationHandler.END

async def morning_message(context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –î–æ –≤—ã–ø—É—Å–∫–∞ ‚Ä¶¬ª
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è job'–æ–º JobQueue.
    """
    job_data = context.job.data          # —Ç–æ, —á—Ç–æ –º—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ job
    chat_id   = job_data["chat_id"]
    target_iso= job_data["target_date_iso"]  # 'YYYY-MM-DD'
    tz_str    = job_data["tz"]           # 'Europe/Moscow' –∏ —Ç.–ø.

    try:
        target_date_obj = datetime.fromisoformat(target_iso).date() # –ò—Å–ø–æ–ª—å–∑—É–µ–º .date() –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–∞—Ç
        today       = datetime.now(ZoneInfo(tz_str)).date()
        days_left   = (target_date_obj - today).days

        if days_left < 0:
            text = f"üéâ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í—ã —É–∂–µ {abs(days_left)} –¥–Ω. –∫–∞–∫ –æ—Ñ–∏—Ü–µ—Ä!"
        elif days_left == 0:
            text = "üèÅ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –°–µ–≥–æ–¥–Ω—è –≤—ã–ø—É—Å–∫! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéì"
        else:
            text = f"üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –î–æ –≤—ã–ø—É—Å–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω."

        await context.bot.send_message(chat_id=chat_id, text=text)
        logger.info(f"–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ morning_message –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}", exc_info=True)

def reschedule_daily_job(context: ContextTypes.DEFAULT_TYPE,
                         chat_id: int,
                         target_date_obj: datetime.date, # –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ–±—ä–µ–∫—Ç date
                         tz_str: str = "Europe/Moscow",  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                         hour: int = 7, minute: int = 0): # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 7 —É—Ç—Ä–∞, –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    """
    –°–Ω–∏–º–∞–µ—Ç —Å—Ç–∞—Ä—ã–π job (–µ—Å–ª–∏ –±—ã–ª) –∏ —Å—Ç–∞–≤–∏—Ç –Ω–æ–≤—ã–π, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç
    –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ <hour:minute> –ø–æ tz_str —Å–ª–∞—Ç—å morning_message.
    """
    job_name = str(chat_id)
    # 1) —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
    for old_job in context.job_queue.get_jobs_by_name(job_name):
        old_job.schedule_removal()
        logger.info(f"–£–¥–∞–ª–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π job '{job_name}'")


    # 2) —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ target_date_obj —ç—Ç–æ date, –∞ –Ω–µ datetime
    if isinstance(target_date_obj, datetime):
        target_date_to_store = target_date_obj.date()
    else:
        target_date_to_store = target_date_obj

    context.job_queue.run_daily(
        morning_message,
        time=time(hour=hour, minute=minute, tzinfo=ZoneInfo(tz_str)),
        name=job_name,                       # —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏/—É–¥–∞–ª–∏—Ç—å
        data={
            "chat_id": chat_id,
            "target_date_iso": target_date_to_store.isoformat(), # –•—Ä–∞–Ω–∏–º ISO —Å—Ç—Ä–æ–∫—É
            "tz": tz_str
        }
    )
    logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π job '{job_name}' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {hour:02d}:{minute:02d} ({tz_str}) –¥–ª—è –¥–∞—Ç—ã {target_date_to_store.isoformat()}")


def main():
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –û–î–ò–ù –†–ê–ó –í–ù–ê–ß–ê–õ–ï
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    persistence_file_path = "/opt/render/project/src/bot_data_persistence.pkl"
    # –∏–ª–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å /tmp/:
    # persistence_file_path = "/tmp/bot_data_persistence.pkl"

    # --- –í–†–ï–ú–ï–ù–ù–´–ô –ö–û–î –î–õ–Ø –ü–†–û–í–ï–†–ö–ò/–°–û–ó–î–ê–ù–ò–Ø PERSISTENCE ---
    # (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —è –¥–∞–ª –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ,
    #  –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø—É—Å—Ç–æ–π pickle-—Ñ–∞–π–ª, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω—É–ª–µ–≤–æ–π)
    import os
    import pickle
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å persistence_file_path
    # –ü—Ä–∏–º–µ—Ä (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –æ—Ç–≤–µ—Ç–∞):
    if not os.path.exists(persistence_file_path) or (os.path.exists(persistence_file_path) and os.path.getsize(persistence_file_path) == 0):
        if os.path.exists(persistence_file_path): # –µ—Å–ª–∏ –±—ã–ª –Ω—É–ª–µ–≤–æ–π, —É–¥–∞–ª—è–µ–º
            os.remove(persistence_file_path)
        logger.info(f"–§–∞–π–ª {persistence_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª –Ω—É–ª–µ–≤—ã–º. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.")
        try:
            empty_data = {"user_data": {}, "chat_data": {}, "bot_data": {}, "conversations": {}, "callback_persistence": None}
            with open(persistence_file_path, "wb") as f:
                pickle.dump(empty_data, f)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π, –Ω–æ –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {persistence_file_path}")
        except Exception as e_create:
            logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ {persistence_file_path}: {e_create}")
            return # –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
    else:
        logger.info(f"–§–∞–π–ª –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ {persistence_file_path} –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ –Ω—É–ª–µ–≤–æ–π.")
    # --- –ö–û–ù–ï–¶ –í–†–ï–ú–ï–ù–ù–û–ì–û –ö–û–î–ê ---

    try:
        BOT_TOKEN = os.getenv("BOT_TOKEN")
        if not BOT_TOKEN:
            logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

        health_thread = threading.Thread(target=run_health_check_server, daemon=True)
        health_thread.start()

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç PicklePersistence –û–î–ò–ù –†–ê–ó, –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –ø—É—Ç—å
        my_persistence = PicklePersistence(
            filepath=persistence_file_path
            # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JobQueue:
            # store_callback_data=False
        )
        logger.info(f"PicklePersistence –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ñ–∞–π–ª–æ–º: {persistence_file_path}")


        application = (
            ApplicationBuilder()
            .token(BOT_TOKEN)
            .persistence(my_persistence)
            .build()
        )

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                DATE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate_days)],
                MAIN_MENU: [
                    MessageHandler(filters.Regex('^üìä –û–ë–ù–û–í–ò–¢–¨ –î–ê–ù–ù–´–ï$') | filters.Command("check"), check_days),
                    MessageHandler(filters.Regex('^üîÑ –ò–ó–ú–ï–ù–ò–¢–¨ –î–ê–¢–£$'), reset),
                    CommandHandler("reset", reset),
                ],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
            name="graduation_counter_conversation",
            persistent=True
        )

        application.add_handler(conv_handler)

        async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        application.add_handler(MessageHandler(filters.COMMAND, unknown))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)

if __name__ == "__main__":
    main()
